import { app, BrowserWindow, ipcMain } from 'electron';
import { AppDataSource } from './data/data-source';
import { registerClientHandlers } from './ipcHandlers/clientHandlers';
import { registerPassHandlers } from './ipcHandlers/passHandlers';
import { registerPassTypeHandlers } from './ipcHandlers/passTypeHandlers';
import { registerTrainingSessionHandlers } from './ipcHandlers/trainingSessionHandlers';
import { registerACRManagerHandlers } from './ipcHandlers/acrManagerHandlers';
import { CryptoManager } from './services/CryptoManager';
import { ACRManager } from './services/ACRManager';
import { LoggerService } from './services/LoggerService';
import { getConfigPath } from './utils/getConfigPath';
import { registerOtherHandlers } from './ipcHandlers/otherHandlers';
import {registerBackupHandlers} from './ipcHandlers/backupHandlers'


// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

LoggerService.init();

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  LoggerService.info("Shutdown")
  app.quit();
}

const createWindow = (): BrowserWindow => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 1000,
    autoHideMenuBar: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (!app.isPackaged) {
    mainWindow.webContents.openDevTools();
  }

  return mainWindow;
};



// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    LoggerService.info("Shutdown")
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

app.whenReady().then(async () => {
  try {
    await AppDataSource.initialize();

    const configPath = getConfigPath();
    const cryptoManager = CryptoManager.getInstance(configPath);
    const acrManager = ACRManager.getInstance(cryptoManager);

    const mainWindow = createWindow();

    LoggerService.info('App is ready, registering handlers...');

    registerClientHandlers();
    registerPassHandlers();
    registerPassTypeHandlers();
    registerTrainingSessionHandlers();
    registerACRManagerHandlers(mainWindow, acrManager);
    registerBackupHandlers(mainWindow);
    registerOtherHandlers();

    LoggerService.info('Handlers registered');

  } catch (error: any) {
    LoggerService.error("Unknown application error", error);
    app.quit();
  }
});